# NOTE: This workflow is overkill for most R packages
# check-standard.yaml is likely a better choice
# usethis::use_github_action("check-standard") will install it.
#
# For help debugging build failures open an issue on the RStudio community with the 'github-actions' tag.
# https://community.rstudio.com/new-topic?category=Package%20development&tags=github-actions
on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master

name: R-CMD-check

jobs:
  R-CMD-check:
    runs-on: ${{ matrix.config.os }}

    name: ${{ matrix.config.os }} (${{ matrix.config.r }})

    strategy:
      fail-fast: false
      matrix:
        config:
          - {os: macOS-latest,   r: 'release'}
          - {os: windows-latest, r: 'release'}
          - {os: ubuntu-20.04,   r: 'devel', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest", http-user-agent: "R/4.1.0 (ubuntu-20.04) R (4.1.0 x86_64-pc-linux-gnu x86_64 linux-gnu) on GitHub Actions" }
          - {os: ubuntu-20.04,   r: 'release', rspm: "https://packagemanager.rstudio.com/cran/__linux__/focal/latest"}

    env:
      R_REMOTES_NO_ERRORS_FROM_WARNINGS: true
      RSPM: ${{ matrix.config.rspm }}
      GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
      _R_CHECK_FORCE_SUGGESTS_: false

    steps:
      - name: Set git to use LF
        run: |
          git config --global core.autocrlf false

      - name: Install X11 dependencies on MacOS
        if: runner.os == 'macOS'
        run: brew install --cask xquartz
        shell: bash

      - name: Install deps on MacOS
        if: runner.os == 'macOS'
        run: |
          brew install cairo
          brew install libgit2
          brew install udunits
        shell: bash

      - name: Link gfortran on MacOS
        if: runner.os == 'macOS'
        run: |
          sudo ln -s /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
          sudo mkdir /usr/local/gfortran
          sudo ln -s /usr/local/gfortran-10 /usr/local/gfortran
        shell: bash

      - name: Create Makevars for Fortran linking options on macOS
        if: runner.os == 'macOS'
        run: |
          try(dir.create("~/.R"))
          writeLines(c("GCCBASE:=$(shell brew --prefix gcc)","FLIBS=-L$(GCCBASE)/lib/gcc/10/lib -lm",""),"~/.R/Makevars")
        shell: Rscript {0}

      - uses: actions/checkout@v2

      - uses: r-lib/actions/setup-r@v1
        with:
          r-version: ${{ matrix.config.r }}
          http-user-agent: ${{ matrix.config.http-user-agent }}

      - uses: r-lib/actions/setup-pandoc@v1

      - name: Query dependencies
        run: |
          install.packages('remotes')
          install.packages('sessioninfo')
          install.packages('devtools')
          saveRDS(remotes::dev_package_deps(dependencies = TRUE), ".github/depends.Rds", version = 2)
          writeLines(sprintf("R-%i.%i", getRversion()$major, getRversion()$minor), ".github/R-version")
        shell: Rscript {0}

      - name: Install Symengine from source for MacOS
        if: runner.os == 'macOS'
        run: install.packages("symengine", type="source")
        shell: Rscript {0}

      - name: Cache R packages
        if: runner.os != 'Windows'
        uses: actions/cache@v1
        with:
          path: ${{ env.R_LIBS_USER }}
          key: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-${{ hashFiles('.github/depends.Rds') }}
          restore-keys: ${{ runner.os }}-${{ hashFiles('.github/R-version') }}-1-

      - name: Install system dependencies
        if: runner.os == 'Linux'
        run: |
          while read -r cmd
          do
            eval sudo $cmd
          done < <(Rscript -e 'writeLines(remotes::system_requirements("ubuntu", "20.04"))')
          
      - name: Install development nlmixr2data
        run: remotes::install_github("nlmixr2/nlmixr2data")
        shell: Rscript {0}
          
      - name: Install development lotri
        run: remotes::install_github("nlmixr2/lotri")
        shell: Rscript {0}
      - name: Install development rxode2ll
        run: remotes::install_github("nlmixr2/rxode2ll")
        shell: Rscript {0}
      - name: Install development rxode2parse
        run: remotes::install_github("nlmixr2/rxode2parse")
        shell: Rscript {0}
      - name: Install development rxode2
        run: remotes::install_github("nlmixr2/rxode2")
        shell: Rscript {0}
      - name: Install development nlmixr2est
        run: remotes::install_github("nlmixr2/nlmixr2est")
        shell: Rscript {0}

      - name: Install dependencies
        run: remotes::install_deps(dependencies = TRUE)
        shell: Rscript {0}

      - name: Session info
        run: |
          options(width = 100)
          pkgs <- installed.packages()[, "Package"]
          sessioninfo::session_info(pkgs, include_base = TRUE)
        shell: Rscript {0}

      - name: Check
        env:
          _R_CHECK_CRAN_INCOMING_: false
        run: rcmdcheck::rcmdcheck(args = c("--no-manual", "--as-cran"), error_on = "warning", check_dir = "check")
        shell: Rscript {0}

      - name: Show testthat output
        if: always()
        run: find check -name 'testthat.Rout*' -exec cat '{}' \; || true
        shell: bash

      - name: Upload check results
        if: failure()
        uses: actions/upload-artifact@main
        with:
          name: ${{ runner.os }}-r${{ matrix.config.r }}-results
          path: check
